@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "io.github.dtolmachev1.consoleapp.Runner",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1245635613 { 
   	label=github
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_159092369 { 
   	label=dtolmachev1
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Customers1961068075[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Customers</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   SLEEP_TIME: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isRunning: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   orderQueue: SharedQueue&lt;Order&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   random: Random [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ produce()</TD></TR>
<TR><TD ALIGN="LEFT" >+ stop()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Deliverer1961068075[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Deliverer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   SLEEP_TIME: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   bagCapacity: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   deliveryQueue: SharedQueue&lt;Order&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isRunning: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   random: Random [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ consume()</TD></TR>
<TR><TD ALIGN="LEFT" >+ stop()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Order1961068075[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Order</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   number: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   state: State [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ printState()</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateState(): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Pizzaiolo1961068075[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Pizzaiolo</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   SLEEP_TIME: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   deliveryQueue: SharedQueue&lt;Order&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isRunning: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   orderQueue: SharedQueue&lt;Order&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   random: Random [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ produce()</TD></TR>
<TR><TD ALIGN="LEFT" >+ stop()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Pizzeria1961068075[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Pizzeria</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   SLEEP_TIME: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   customers: Customers [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   deliverers: List&lt;Deliverer&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   deliveryQueue: SharedQueue&lt;Order&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   orderQueue: SharedQueue&lt;Order&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   pizzaiolos: List&lt;Pizzaiolo&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ start()</TD></TR>
<TR><TD ALIGN="LEFT" >+ stop()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PizzeriaApp128295041[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PizzeriaApp</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   CHARSET: Charset [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   DELIVERERS_CAPACITY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   NDELIVERERS: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   NPIZZAIOLOS: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   QUEUE_CAPACITY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   TIME: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   filePath: Path [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   pizzeria: Pizzeria [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   random: Random [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- createFile()</TD></TR>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PizzeriaConfigurator1961068075[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PizzeriaConfigurator</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   deliverersCapacity: int[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gson: Gson [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nDeliverers: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nPizzaiolos: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   queueCapacity: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ deserialize(reader: Reader)</TD></TR>
<TR><TD ALIGN="LEFT" >+ serialize(writer: Writer)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Runner128295041[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Runner</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SharedQueue124377190[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SharedQueue&lt;T&gt;</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   EMPTY: Object [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   FULL: Object [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   queue: Queue&lt;T&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   queueCapacity: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ add(data: T)</TD></TR>
<TR><TD ALIGN="LEFT" >+ notifyForEmpty()</TD></TR>
<TR><TD ALIGN="LEFT" >+ notifyForFull()</TD></TR>
<TR><TD ALIGN="LEFT" >+ remove(): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ waitOnEmpty()</TD></TR>
<TR><TD ALIGN="LEFT" >+ waitOnFull()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
Pizzeria1961068075 -> Customers1961068075[label="customers
[0..1]"];
Pizzeria1961068075 -> Deliverer1961068075[label="deliverers
[0..*]"];
Pizzeria1961068075 -> Order1961068075[label="deliveryQueue
[0..1]"];
Pizzeria1961068075 -> Order1961068075[label="orderQueue
[0..1]"];
Pizzeria1961068075 -> Pizzaiolo1961068075[label="pizzaiolos
[0..*]"];
Pizzeria1961068075 -> SharedQueue124377190[label="deliveryQueue
[0..1]"];
Pizzeria1961068075 -> SharedQueue124377190[label="orderQueue
[0..1]"];
PizzeriaApp128295041 -> Pizzeria1961068075[label="pizzeria
[0..1]"];
PizzeriaApp128295041 -> PizzeriaConfigurator1961068075[label="createFile() -> serialize()"];
Runner128295041 -> PizzeriaApp128295041[label="main() -> run()"];
    
}
@enduml